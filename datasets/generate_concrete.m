% Parses the abalone data, normalizes it and stores it in Matlab format.
% Download the dataset from
% - https://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls
% Open the xls sheet and store it again as Concret_Data.csv (the first line
% of the csv-file should contain the header). Then run the following
% script. Most of this script was generated by Matlab automatically.

%% Import data from text file.
% Script for importing data from the following text file:
%
%    Concrete_Data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/02/17 19:22:16

%% Initialize variables.
filename = 'Concrete_Data.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
ConcreteData = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% The following code was added by Wolfgang Roth
x = ConcreteData(:, 1:end-1);
t = ConcreteData(:, end);
clear ConcreteData;
x = bsxfun(@times, bsxfun(@minus, x, mean(x)), 1 ./ std(x));
save('concrete.mat', 'x', 't');